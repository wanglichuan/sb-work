/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library

def coreprojects = [project(':sb-work-base-core')]
def extprojects = [project(':sb-work-base-log')]

buildscript {
    repositories {
        //配置仓库
        maven { url "http://repository.jboss.org/nexus/content/groups/public/" }
        maven { url "http://dl.bintray.com/cjstehno/public" }
        maven { url "http://repo.spring.io/libs-snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }
    
    dependencies {
        //创建gradle构建模板
        classpath 'gradle-templates:gradle-templates:1.5'
        //添加spring boot gradle插件
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE'
    }
}

apply plugin:'templates'
allprojects {
    //可以发布到Maven仓库中供人使用
    apply plugin: "maven"
    apply plugin: "java"

    repositories {
        maven { url "http://repo.spring.io/libs-snapshot" }
        maven { url c3_repo }
        maven { url "http://repository.jboss.org/nexus/content/groups/public/" }
        maven { url "https://repository.apache.org/content/repositories/releases/" }
        maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
        mavenCentral()
        jcenter()
    }
    
    configurations {
        compile.exclude group: "org.slf4j", module: "log4j-over-slf4j"
        compile.exclude group: "org.slf4j", module: "jcl-over-slf4j"
        compile.exclude group: "org.slf4j", module: "jul-over-slf4j"
        compile.exclude group: "org.slf4j", module: "jul-to-slf4j"
    }
}

subprojects {
    apply plugin: "eclipse"
    apply plugin: 'spring-boot'
    //apply plugin: 'eclipse-wtp'

    eclipse {
        classpath {
            downloadSources = true
            defaultOutputDir = file("bin")
        }
    }
    bootRepackage.enabled = false

    sourceCompatibility = java_version
    targetCompatibility = java_version

    ext {
        compileJava.options.encoding = 'UTF-8'
        compileTestJava.options.encoding = 'UTF-8'
    }
    sourceSets {
	    main {
	        java {
	            srcDir 'src/main/java'
	        }
	        resources {
	            srcDir 'src/main/resources'
	        }
	    }
	    test {
	        java {
	            srcDir 'src/test/java'
	        }
	        resources {
	            srcDir 'src/test/resources'
	        }
	    }
	}
	task "createDirs" {
	   sourceSets*.java.srcDirs*.each { it.mkdirs() }
	   sourceSets*.resources.srcDirs*.each { it.mkdirs() }
	}
	task "buildEnv"(dependsOn:["clean", "cleanEclipse", "eclipse", "createDirs"]) {
	}
	dependencies {
        compile("org.springframework.boot:spring-boot-starter:${spring_boot_version}")
        compile("org.springframework.boot:spring-boot-starter-aop:${spring_boot_version}")
        compile("org.springframework.boot:spring-boot-starter-data-jpa:${spring_boot_version}"){
          exclude group: 'org.apache.tomcat', module:'tomcat-jdbc'
        }
        compile("org.springframework.boot:spring-boot-starter-actuator:${spring_boot_version}")
        compile("org.springframework:spring-context-support")
        compile "net.sf.ehcache:ehcache:${ehcache_version}"
        compile "org.hibernate:hibernate-ehcache:${hibernate_version}"
        compile "joda-time:joda-time:${joda_time_version}"
        compile("org.jadira.usertype:usertype.core:${usertype_core_version}"){
          exclude group: 'org.slf4j', module: 'slf4j-api'
          exclude group: 'org.hibernate', module: 'hibernate-entitymanager'
        }
        compile "com.google.guava:guava:${google_guava_version}"
        compile "org.apache.commons:commons-lang3:${commons_lang3_version}"
        compile "org.apache.httpcomponents:httpcore:${httpcore_version}"
	    compile "org.apache.httpcomponents:httpclient:${httpclient_version}"
	    compile "org.apache.httpcomponents:httpmime:${httpmime_version}"
	    compile "commons-httpclient:commons-httpclient:${commons_httpclient_version}"
        compile "commons-lang:commons-lang:${commons_lang_version}"
        compile "commons-io:commons-io:${commons_io_version}"
        compile("commons-fileupload:commons-fileupload:${commons_fileupload_version}"){
          exclude group: 'commons-io', module: 'commons-io'
        }
        compile "commons-codec:commons-codec:${commons_codec_version}"
	    compile "com.alibaba:druid:${druid_version}"
        compile "org.postgresql:postgresql:${postgresql_version}"
        compile "org.quartz-scheduler:quartz:${quartz_version}"
        compile "ch.qos.logback:logback-core:${logback_version}"
        compile "ch.qos.logback:logback-classic:${logback_version}"
         
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
    
    //打包源代码
	task sourcesJar(type: Jar, dependsOn: classes) {
	    classifier = 'sources'
	    from sourceSets.main.allSource
	}
	 
	artifacts {
	    archives sourcesJar
	}
}
configure(coreprojects) { project ->
	task uploadCore(dependsOn:["uploadArchives"]) {}
}

configure(extprojects) { project ->
    task uploadExt(dependsOn:["uploadArchives"]) {}
}

//configure(implprojects) { project ->
//    task uploadImpl(dependsOn:["uploadArchives"]) {}
//}
